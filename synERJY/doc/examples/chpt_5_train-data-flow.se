// test-flags O = None true, E = data true, confclass Rct
class Rct { 
    static final time timing = 100msec;
				
public Rct () { active { }; };

ControlSingleLine x = new ControlSingleLine();
}
// tex_start train-data-flow
class ControlSingleLine {

Sensor<boolean> isLineFree = new Sensor<boolean>(new SimInput());

Sensor<boolean>  leftTrainWaiting = new Sensor<boolean>(new SimInput());
Sensor<boolean> rightTrainWaiting = new Sensor<boolean>(new SimInput());

Sensor<boolean>   leftPointingIsIn = new Sensor<boolean>(new SimInput());
Sensor<boolean>  leftPointingIsOut = new Sensor<boolean>(new SimInput());
Sensor<boolean>  rightPointingIsIn = new Sensor<boolean>(new SimInput());
Sensor<boolean> rightPointingIsOut = new Sensor<boolean>(new SimInput());

Signal<boolean>   leftPointingToIn = new Signal<boolean>(new SimOutput());
Signal<boolean>  leftPointingToOut = new Signal<boolean>(new SimOutput());
Signal<boolean>  rightPointingToIn = new Signal<boolean>(new SimOutput());
Signal<boolean> rightPointingToOut = new Signal<boolean>(new SimOutput());

Signal<boolean>  leftSignal = new Signal<boolean>(new SimOutput());
Signal<boolean> rightSignal = new Signal<boolean>(new SimOutput());

public ControlSingleLine () {
  active { 
    sustain {|
      Signal<boolean> priority;
      Signal<boolean> change;
      Signal<boolean> trainWaiting;
      Signal<boolean> trainArriving;
      Signal<boolean> lineFreed;

     priority       := if (change) {
                          leftTrainWaiting && rightTrainWaiting;
                       } else if (! pre(priority)) {
                          leftTrainWaiting;
                       } else { 
                          pre(priority);
                       };
      change        :=     isLineFree && trainArriving 
                        || lineFreed && trainWaiting;
      trainWaiting  := leftTrainWaiting || rightTrainWaiting;            
      trainArriving := false -> trainWaiting && ! pre(trainWaiting);   
      lineFreed     := false -> isLineFree && ! pre(isLineFree);
      leftPointingToIn   := priority; 
      rightPointingToOut := priority; 
      rightPointingToIn  := ! priority; 
      leftPointingToOut  := ! priority; 
      leftSignal   := 
          false -> leftTrainWaiting && isLineFree && 
                     leftPointingIsIn && rightPointingIsOut;
      rightSignal  := 
          false -> rightTrainWaiting  && isLineFree &&
                     rightPointingIsIn && leftPointingIsOut;
      |};
  };
};

}
// tex_end train_data_flow
