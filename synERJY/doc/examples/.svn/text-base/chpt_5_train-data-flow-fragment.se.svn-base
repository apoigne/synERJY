// test-flags O = None true, E = data true, confclass Rct
class Rct { 
    static final time timing = 100msec;
				
public Rct () { active { }; };

ControlSingleLine x = new ControlSingleLine();
}

class ControlSingleLine {

public ControlSingleLine () {
  active { 
    sustain {|
     priority       := if (change) {
                          leftTrainWaiting && rightTrainWaiting;
                       } else if (! pre(priority)) {
                          leftTrainWaiting;
                       } else { 
                          pre(priority);
                       };
// tex_start train-data-flow-fragment
change   :=   isLineFree && trainArriving 
                  || lineFreed && trainWaiting;
trainWaiting  := leftTrainWaiting || rightTrainWaiting;            
trainArriving := false -> trainWaiting && ! pre(trainWaiting);
lineFreed     := false -> isLineFree && ! pre(isLineFree);
// tex_end train-data-flow-fragment
      leftPointingToIn   := priority; 
      rightPointingToOut := priority; 
      rightPointingToIn  := ! priority; 
      leftPointingToOut  := ! priority; 
      leftSignal   := 
          false -> leftTrainWaiting && isLineFree && 
                     leftPointingIsIn && rightPointingIsOut;
      rightSignal  := 
          false -> rightTrainWaiting  && isLineFree &&
                     rightPointingIsIn && leftPointingIsOut;
      |};
  };
};

Sensor<boolean> isLineFree = new Sensor<boolean>(new SimInput());

Sensor<boolean>  leftTrainWaiting = new Sensor<boolean>(new SimInput());
Sensor<boolean> rightTrainWaiting = new Sensor<boolean>(new SimInput());

Sensor<boolean>   leftPointingIsIn = new Sensor<boolean>(new SimInput());
Sensor<boolean>  leftPointingIsOut = new Sensor<boolean>(new SimInput());
Sensor<boolean>  rightPointingIsIn = new Sensor<boolean>(new SimInput());
Sensor<boolean> rightPointingIsOut = new Sensor<boolean>(new SimInput());

Signal<boolean>   leftPointingToIn = new Signal<boolean>(new SimOutput());
Signal<boolean>  leftPointingToOut = new Signal<boolean>(new SimOutput());
Signal<boolean>  rightPointingToIn = new Signal<boolean>(new SimOutput());
Signal<boolean> rightPointingToOut = new Signal<boolean>(new SimOutput());

Signal<boolean>  leftSignal = new Signal<boolean>(new SimOutput());
Signal<boolean> rightSignal = new Signal<boolean>(new SimOutput());

Signal<boolean> change   = new Signal<boolean>();
Signal<boolean> priority = new Signal<boolean>();

Signal<boolean> trainWaiting  = new Signal<boolean>();
Signal<boolean> trainArriving = new Signal<boolean>();
Signal<boolean> lineFreed     = new Signal<boolean>();
}
