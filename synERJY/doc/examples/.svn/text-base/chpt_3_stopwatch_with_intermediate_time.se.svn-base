// test-flags O = None true, E = data true
class StopwatchWithIntermediateTime {

static final time timing = 10msec;
				
time the_time;

// tex_start stopwatch-with-intermediate-time
Sensor start_stop = new Sensor(new SimInput());
Sensor      reset = new Sensor(new SimInput());
Sensor      lap = new Sensor(new SimInput());

Signal<time> display_time = new Signal<time>(new SimOutput());

Signal<time> elapsed_time = new Signal<time>();

public StopwatchWithIntermediateTime () {
  active {
    [[ stopwatch_with_reset(); || lap_filter(); ]];
  };
};

void lap_filter () {
   loop {
     cancel strongly next {
        loop {
           cancel next {
              sustain {  //  running time 
                 if (?elapsed_time) {
                    emit display_time($elapsed_time); // (*)
                 };
              };
           } when (?lap);
           // frozen time
           await next ?lap;
           emit display_time($elapsed_time);
       };
     } when (?reset);
  };
};
// tex_end 

void stopwatch_with_reset () {
  loop {
      cancel strongly {
         simple_stopwatch ();
      } when (?reset);
      next;
  };
};

void simple_stopwatch () {
   the_time = 0msec;
   loop {
      await ?start_stop;
      emit elapsed_time(the_time);
      next;
      cancel {
        loop {
           the_time = the_time + timing;
           emit elapsed_time(the_time);
           next;
        };
      } when (?start_stop);
      next;
   };
};
}

