// test-flags O = None true, E = data true
class Stopwatch {

static final time timing = 10msec;
				
time the_time;

// tex_start stopwatch-general
Sensor   start_stop = new Sensor(new SimInput());
Sensor freeze_reset = new Sensor(new SimInput());

Signal<time> display_time = new Signal<time>(new SimOutput());

Signal reset = new Signal();
Signal   lap = new Signal();

Signal<time> elapsed_time = new Signal<time>();

public Stopwatch () {
  active {
    [[ button_interpreter();
    || lap_filter(); 
    || stopwatch_with_reset();
    ]];
  };
};

void button_interpreter () {
   Signal stopwatch_running = new Signal();
   DelayedSignal frozen_time = new DelayedSignal();
   [[ loop {
         await ?freeze_reset;
         if (?stopwatch_running) {
            emit lap;
         } else if (?frozen_time) {
            emit lap;
         } else {
            emit reset;
         };
         next;
      };
   || // flip-flop "running/stopped"
      loop { 
         await ?start_stop;
         cancel next {
            sustain { emit stopwatch_running; };
         } when (?start_stop);
         next;
      };
   || // flip-flop "running-time/frozen-time"
      loop {
         await ?lap;
         cancel next {
            sustain { emit frozen_time; };
         } when (?lap);
         next;
      };
   ]];
};

void lap_filter () {
   loop {
     cancel strongly next {
        loop {
           cancel strongly next {
              sustain { 
                 if (?elapsed_time) {
                    emit display_time($elapsed_time);
                 };
              };
           } when (?lap);
           await next ?lap;
           emit display_time($elapsed_time);
       };
     } when (?reset);
  };
};
// tex_end 

void stopwatch_with_reset () {
  loop {
      cancel strongly {
         simple_stopwatch ();
      } when (?reset);
      next;
  };
};

void simple_stopwatch () {
   the_time = 0msec;
   loop {
      await ?start_stop;
      emit elapsed_time(the_time);
      next;
      cancel {
        loop {
           the_time = the_time + timing;
           emit elapsed_time(the_time);
           next;
        };
      } when (?start_stop);
      next;
   };
};
}

