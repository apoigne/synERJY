#!/usr/bin/perl

$infile          = "se.trace.tr";
$outfile_prefix  = "se.plot.";
$sigs     = 0;
$purecnt  = 1.0;
$pureincr = 0.1;

print "traceplot.pl [-p se.plot.] [-f se.trace.tr] signalOrSensor... \n";

while (1) {
  $p = shift(@ARGV);
  if ($p eq '-f') {
     $p = shift(@ARGV);
     if ($p eq '' or $p =~ /^-/) {
        die "invalid input file name: $p";
     } else {
        $infile = $p;
     };
  } elsif ($p eq '-p') {
     $p = shift(@ARGV);
     if ($p eq '' or $p =~ /^-/) {
        die "invalid prefix for temporary file names: $p";
     } else {
        $outfile_prefix = $p;
     };
  } elsif ($p eq '') {
     last;
  } else {
     $sigs++;
     $table{$p} = ' ';
  };
};

if ($sigs > 0) {
   print "process $sigs signals/flows\n";
} else {
   print "no signals to process, supply names as command line parameters\n";
};

open(IN,"<$infile");
while (1) {
  $l = <IN> || die "invalid trace file header";
  chop($l);
  if ($l =~ /^}$/) { last; };
};

print "header skipped, now processing instant:\n";
$i = 0;
top: while (1) {
  $i++;
  print "$i ";
  $c = '';
  while (1) {
    $eof = 0;
    $l = <IN> || ( $eof = 1 );
    if ($eof and $c == '') {
       close(IN); last top;
    } elsif ($eof) {
       die "invalid instant data {+]: EOF";
    };
    chop($l);
    if ($l =~ /^\+\+i/) { last; };
    &prcLine();
  };
  while (1) {
    $l = <IN> || die "invalid instant data {-]: EOF";
    chop($l);
    if ($l =~ /^--i/) { last; };
    &prcLine();
  };
};

$plot = '';
print "\nall signals/flows:\n";
foreach $k (keys(%all)) {
  print "  $k\n";
};
print "processed signals/flows:\n";
foreach $k (keys(%table)) {
  $f = "$outfile_prefix$k.data";
  print "  $k creating file $f\n";
  open(OUT,">$f");
  print OUT "# file $f is generated by traceplot.pl\n";
  $d = $table{$k};
  while (1) {
    if ($d =~ /^\s*(\d+),(\S+)/) {
       print OUT "$1 $2\n";
       $d =~ s/^\s*\S+//;
    } else {
       $d =~ s/^\s*//;
       if ($d eq '') {
          last;
       } else {
          die "invalid numeric instant data found: $d\n";
       };
    };
  };
  close(OUT);
  if ($pure{$k}) {
     $pp = ' with points pointtype 15 pointsize 2';
  } else {
     $pp = ' smooth unique';
  };
  if ($plot eq '') {
     $plot = "plot '$f'$pp";
  } else {
     $plot = "$plot, '$f'$pp";
  };
};
if ($plot eq '') {
   print "finished.\n";
} else {
   print "finished. Now use gnuplot with the following command:\n";
   print "$plot\n";
};
exit(0);

sub prcLine {
    if ($l =~ /^[+-](\S+)\s*\(([^\)]*)\)\s*$/) {
       $n = $1;
       $p = $2;
       $all{$n} = ' ';
       if ($table{$n}) {
          if ($p eq '') {
             if ($pure{$n}) {
                $p = $pure{$n};
             } else {
                $pure{$n} = $purecnt;
                $p = $purecnt;
                $purecnt = $purecnt + $pureincr;
                print OUT "incr: $n\n";
             };
          };
          $table{$n} = "$table{$n}$i,$p "
       };
    } else {
       die "invalid instant data found: $l\n";
    };
}
