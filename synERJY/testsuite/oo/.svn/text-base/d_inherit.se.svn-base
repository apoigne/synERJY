class Xc {

public Xc (int inc)
{
  xc_ar = inc+1;
  xc_av = inc+2;
  xc_au = inc+3;
  xc_sr = 4;
  xc_sv = 5;
  xc_su = 6;
};

protected int xc_ar;
private   int xc_av;
public    int xc_au;

static protected int xc_sr;
static private   int xc_sv;
static public    int xc_su;

static final protected int xc_fr = 7;
static final private   int xc_fv = 8;
static final public    int xc_fu = 9;

public int f ()
{
   return xc_ar;
};

}

class Yc extends Xc {
public Yc (int inc)
{
   super(inc);
   yc_ar = inc+11;
   yc_av = inc+12;
   yc_au = inc+13;
   yc_sr = 14;
   yc_sv = 15;
   yc_su = 16;
};

protected int yc_ar;
private   int yc_av;
public    int yc_au;

static protected int yc_sr;
static private   int yc_sv;
static public    int yc_su;

static final protected int yc_fr = 17;
static final private   int yc_fv = 18;
static final public    int yc_fu = 19;
}

class Zc extends Yc {
public Zc (int inc)
{
   super(inc);
   zc_ar = inc+31;
   zc_av = inc+32;
   zc_au = inc+33;
   zc_sr = 34;
   zc_sv = 35;
   zc_su = 36;
};

protected int zc_ar;
private   int zc_av;
public    int zc_au;

static protected int zc_sr;
static private   int zc_sv;
static public    int zc_su;

static final protected int zc_fr = 37;
static final private   int zc_fv = 38;
static final public    int zc_fu = 39;

}

class Sc extends Xc {
public Sc (int inc)
{
   super(inc);
   sc_ar = inc+21;
   sc_av = inc+22;
   sc_au = inc+23;
   sc_sr = 24;
   sc_sv = 25;
   sc_su = 26;
};

protected int sc_ar;
private   int sc_av;
public    int sc_au;

static protected int sc_sr;
static private   int sc_sv;
static public    int sc_su;

static final protected int sc_fr = 27;
static final private   int sc_fv = 28;
static final public    int sc_fu = 29;

}

class Rc {

public Rc ()
{
   active { react(); };
};

Signal<int> outi = new Signal<int>(new SimOutput());

Zc zdflt = new Zc(0);
Sc sdflt = new Sc(0);

Xc xc = new Xc(100);
Yc yc = new Yc(200);
Zc zc = new Zc(300);
Sc sc = new Sc(400);

Xc x1, x2, x3, x4;
Yc y1, y2, y3, y4;
Zc z1, z2, z3, z4;
Sc s1, s2, s3, s4;

// gives a typing error - as expected:
// s1 = (Sc)y1;

#ifdef T1
// trace
//             -> outi(103)
//             -> outi(203)
//             -> outi(303)
//             -> outi(403)
private void test_cast ()
{
   // up casts
   x1 = xc;     x2 = yc;     x3 = zc;     x4 = sc;
};

private void react ()
{
   test_cast();
   emit outi(x1.xc_au); next;
   emit outi(x2.xc_au); next;
   emit outi(x3.xc_au); next;
   emit outi(x4.xc_au); next;
};
#endif

#ifdef T2
// trace
//             -> outi(103)
//             -> outi(203)
//             -> outi(303)
//             -> outi(403)
private void test_cast ()
{
   // up casts
   x1 = ((Xc)xc); x2 = ((Xc)yc); x3 = ((Xc)zc); x4 = ((Xc)sc);
};

private void react ()
{
   test_cast();
   emit outi(x1.xc_au); next;
   emit outi(x2.xc_au); next;
   emit outi(x3.xc_au); next;
   emit outi(x4.xc_au); next;
};
#endif

#ifdef T3
// trace
//             -> outi(3)
//             -> outi(203)
//             -> outi(303)
//             -> outi(3)
//             -> outi(13)
//             -> outi(213)
//             -> outi(313)
//             -> outi(13)
private void test_cast ()
{
   x1 = ((Xc)xc); x2 = ((Xc)yc); x3 = ((Xc)zc); x4 = ((Xc)sc);
   // down casts
   y1 = ((Yc)x1); if (y1 == null) { y1 = zdflt; };
   y2 = ((Yc)x2); if (y2 == null) { y2 = zdflt; };
   y3 = ((Yc)x3); if (y3 == null) { y3 = zdflt; };
   y4 = ((Yc)x4); if (y4 == null) { y4 = zdflt; };
};

private void react ()
{
   test_cast();
   emit outi(y1.xc_au); next;
   emit outi(y2.xc_au); next;
   emit outi(y3.xc_au); next;
   emit outi(y4.xc_au); next;
   emit outi(y1.yc_au); next;
   emit outi(y2.yc_au); next;
   emit outi(y3.yc_au); next;
   emit outi(y4.yc_au); next;
};
#endif

#ifdef T4
// trace
//             -> outi(3)
//             -> outi(3)
//             -> outi(303)
//             -> outi(3)
//             -> outi(33)
//             -> outi(33)
//             -> outi(333)
//             -> outi(33)
private void test_cast ()
{
   x1 = ((Xc)xc); x2 = ((Xc)yc); x3 = ((Xc)zc); x4 = ((Xc)sc);
   // down casts
   z1 = ((Zc)x1); if (z1 == null) { z1 = zdflt; };
   z2 = ((Zc)x2); if (z2 == null) { z2 = zdflt; };
   z3 = ((Zc)x3); if (z3 == null) { z3 = zdflt; };
   z4 = ((Zc)x4); if (z4 == null) { z4 = zdflt; };
};

private void react ()
{
   test_cast();
   emit outi(z1.xc_au); next;
   emit outi(z2.xc_au); next;
   emit outi(z3.xc_au); next;
   emit outi(z4.xc_au); next;
   emit outi(z1.zc_au); next;
   emit outi(z2.zc_au); next;
   emit outi(z3.zc_au); next;
   emit outi(z4.zc_au); next;
};
#endif

#ifdef T5
// trace
//             -> outi(3)
//             -> outi(3)
//             -> outi(3)
//             -> outi(403)
//             -> outi(23)
//             -> outi(23)
//             -> outi(23)
//             -> outi(423)
private void test_cast ()
{
   x1 = ((Xc)xc); x2 = ((Xc)yc); x3 = ((Xc)zc); x4 = ((Xc)sc);
   // down casts
   s1 = ((Sc)x1); if (s1 == null) { s1 = sdflt; };
   s2 = ((Sc)x2); if (s2 == null) { s2 = sdflt; };
   s3 = ((Sc)x3); if (s3 == null) { s3 = sdflt; };
   s4 = ((Sc)x4); if (s4 == null) { s4 = sdflt; };
};

private void react ()
{
   test_cast();
   emit outi(s1.xc_au); next;
   emit outi(s2.xc_au); next;
   emit outi(s3.xc_au); next;
   emit outi(s4.xc_au); next;
   emit outi(s1.sc_au); next;
   emit outi(s2.sc_au); next;
   emit outi(s3.sc_au); next;
   emit outi(s4.sc_au); next;
};
#endif

}
