class Rc {

public Rc () {
    active { a1();
    };
};

Sensor x = new Sensor(new SimInput());

Signal<int> fi1 = new Signal<int>(new SimOutput());

Signal s1Entry = new Signal(new SimOutput());
Signal s1During = new Signal(new SimOutput());
Signal s1Exit = new Signal(new SimOutput());

Signal s2Entry = new Signal(new SimOutput());
Signal s2During = new Signal(new SimOutput());
Signal s2Exit = new Signal(new SimOutput());

#ifdef T1
// trace        Automat mit Verfeinerung durch sustain
//      -> s1Entry
//      -> fi1(1) s1During
//      -> fi1(2) s1During
//      -> fi1(3) s1During
//      -> fi1(4) s1During
//      -> fi1(5) s1During
//      -> fi1(6) s1During
//      -> fi1(7) s1During
//      -> fi1(8) s1During
//      -> fi1(9) s1During
//      -> fi1(10) s1During s1Exit s2Entry
//      -> fi1(9) s2During
//      -> fi1(8) s2During
//      -> fi1(7) s2During
//
private void a1 () {
  automaton {

    init { next state s1; };

    state s1
       entry {  emit s1Entry; }
       during { emit s1During; }
       exit {  emit s1Exit; }
       do {
         next;
         sustain {| fi1 := pre(fi1) + 1; |};
       }
       when ($fi1 >= 10) { next state s2;  };

    state s2
       entry {  emit s2Entry; }
       during { emit s2During; }
       exit  { emit s2Exit; }
       do {
          next;
          sustain {| fi1 := pre(fi1) - 1; |};
       }
       when ($fi1 <= 0) { next state s1; };

  };
};
#endif

#ifdef T2
// trace	Automat mit Verfeinerung durch sustain
//      -> s1Entry
//      -> fi1(1) s1During
//	    -> fi1(2) s1During
//	    -> fi1(3) s1During
//  	-> fi1(4) s1During
//  	-> fi1(5) s1During
//  	-> fi1(6) s1During
//  	-> fi1(7) s1During
//  	-> fi1(8) s1During
//  	-> fi1(9) s1During
//  	-> fi1(10) s1During s1Exit s2Entry
//  	-> fi1(9) s2During
//  	-> fi1(8) s2During
//  	-> fi1(7) s2During
//  	-> fi1(6) s2During
// x    -> fi1(5) s1Entry s2During
//  	-> fi1(6) s1During
// x    -> fi1(7) s1Entry s1During
//      -> fi1(8) s1During
private void a1 () {
  automaton {

    init { next state top; };

    state top
      do {
        [[
           automaton {
           init { next state incr; };

           state incr
            entry  { emit s1Entry; }
            during { emit s1During; }
            exit   { emit s1Exit; }
            do {
               next;
               sustain {| fi1 := pre(fi1) + 1; |};
            }
            when ($fi1 >= 10) { next state decr; };

           state decr
            entry  { emit s2Entry; }
            during { emit s2During; }
            exit   { emit s2Exit; }
            do {
               next;
               sustain {| fi1 := pre(fi1) - 1; |};
            }
            when ($fi1 <= 0) { next state incr; };
           };
        ]];
      }
      when (?x) { next state top; };

  };
};

#endif

} //end class Rc
