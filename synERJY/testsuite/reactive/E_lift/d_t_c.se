class Rc {

public Rc () {
    active { [[ c1(); || c2(); ]];
    };
};

Sensor start = new Sensor(new SimInput());

Sensor move_up = new Sensor(new SimInput());
Sensor move_dn = new Sensor(new SimInput());
Sensor stop = new Sensor(new SimInput());

Signal<int> pos = new Signal<int>(new SimOutput());
Signal open_doors = new Signal(new SimOutput());
Signal shut_doors = new Signal(new SimOutput());
Signal req_served = new Signal(new SimOutput());

#ifdef T1
// trace
//              -> pos(0)
// start        -> pos(0)
// move_up      -> pos(1)
// move_up      -> pos(2)
// stop         -> pos(2)
//              -> pos(2) open_doors
//              -> pos(2)
//              -> pos(2) shut_doors req_served
// move_dn      -> pos(1)
// stop         -> pos(1)
//              -> pos(1) open_doors
//              -> pos(1)
//              -> pos(1) shut_doors req_served
// move_up      -> pos(2)
// start        -> pos(0)
//
private void c1 () {
  loop {
    if (?start) { set_pos(); emit pos(position);
    } else if (?move_up) { incr_pos(); emit pos(position);
    } else if (?move_dn) { decr_pos(); emit pos(position);
    } else { emit pos(position); };
    next;
  };
};

// sustain {| $pos = if (?start) { 0;
//                  } else if (?move_up) { pre($pos) + 1;
//                  } else if (?move_dn) { pre($pos) - 1;
//                  } else { pre($pos);
//                  };
// |};

private void c2 () {
  loop {
    await ?stop;
    next; emit open_doors;
    next;
    next; emit shut_doors; emit req_served;
    next;
  };
};

  private int position;
  void set_pos () { position = 0;            };
  void incr_pos () { position = position + 1; };
  void decr_pos () { position = position - 1; };

 precedence {
   set_pos() < incr_pos() < decr_pos() < position;
 };

#endif
} //end class Rc
