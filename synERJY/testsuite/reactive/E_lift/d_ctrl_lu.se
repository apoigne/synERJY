class Rc {

public Rc () {
    active { control();
    };
};

Sensor start = new Sensor(new SimInput());
Sensor reset = new Sensor(new SimInput());

Sensor req_above = new Sensor(new SimInput());
Sensor req_below = new Sensor(new SimInput());
Sensor req_floor = new Sensor(new SimInput());

Sensor req_served = new Sensor(new SimInput());

Signal stop = new Signal(new SimOutput());
Signal move_up = new Signal(new SimOutput());
Signal move_dn = new Signal(new SimOutput());

Signal<int> pos = new Signal<int>(new SimOutput());

#ifdef T1
// trace
//              ->
//              ->
// start        ->
//              -> pos(0)
// req_above    -> pos(0) move_up
// req_above    -> pos(1) move_up
// req_floor req_below             -> pos(2) stop
// req_floor req_served req_below  -> pos(2) move_dn
// req_floor    -> pos(1) stop
//              -> pos(1)
//              -> pos(1)
//              -> pos(1)
//
private void control () {
  automaton {

    init { next state off; };

    state off
      when (?start) { next state on; };

    state on
      do {
        automaton {

          init { next state idle; };

          state idle
            during {| pos := pre(pos); |}
            when (?req_above) { emit move_up; next state moveUP;
              } else when (?req_below) { emit move_dn; next state moveDN;
              } else {                                 next state idle; };

          state moveUP
            do { next; sustain {| pos := pre(pos) + 1; |}; }
            when (?req_floor) { emit stop;     next state stopWhileUP;
                        } else { emit move_up;  next state moveUP; };

          state moveDN
            do { next; sustain {| pos := pre(pos) - 1; |}; }
            when (?req_floor) { emit stop;    next state stopWhileDN;
              } else {                emit move_dn; next state moveDN; };

          state stopWhileUP
            do { next; sustain {| pos := pre(pos); |}; }
            when (?req_served && ?req_above) { emit move_up; next state moveUP;
              } else when (?req_served && ?req_below) {
                  emit move_dn; next state moveDN;
              } else when (?req_served) { next state idle;
              } else { next state stopWhileUP; };

          state stopWhileDN
           do { next; sustain {| pos := pre(pos); |}; }
           when (?req_served && ?req_below) {   emit move_dn; next state moveDN;
             } else when (?req_served && ?req_above) {
                 emit move_up; next state moveUP;
             } else when (?req_served) { next state idle;
             } else { next state stopWhileDN; };
        };
      }
      when (?reset) { next state reset_state; };

    state reset_state
      do { next; emit stop; }
      when (?req_served) { next state off; };
  };
};

#endif
} //end class Rc
